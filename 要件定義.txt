【超詳細】要件定義書 v3.0：YouTubeライバルチャンネル分析バッチシステム
1. システム概要
1.1. 目的
YouTubeショート動画の制作者が、競合となる複数のチャンネルの動向を定量的かつ効率的に分析するため、指定されたチャンネルリストに基づき、ショート動画の各種データを一括で取得し、チャンネルごと・日付ごとに整理されたCSVファイルとして出力するバッチ処理システムを構築する。
1.2. スコープ
IN SCOPE（対象範囲）
指定されたテキストファイル(url_list.txt)から複数のYouTubeチャンネルURLを読み込む機能。
各チャンネルの基本情報および、投稿されているショート動画のリストを取得する機能。
各ショート動画の詳細データ（再生数、高評価数、コメント数等）を取得する機能。
取得したデータを、チャンネルごと・実行日ごとに命名されたCSVファイルとして出力する機能。
処理の進捗と結果、および発生した全てのエラーを記録する詳細なロギング機能。
全ての処理をGoogle Cloud上のサーバーレス環境で実行すること。
OUT OF SCOPE（対象外範囲）
Web UI（ユーザーインターフェース）の開発。本システムは設定ファイルとコマンドライン（またはトリガー）で動作する。
取得したデータの可視化・分析機能。分析は出力されたCSVをGoogleスプレッドシート等で行うことを前提とする。
通常動画（ショート動画以外）のデータ取得。
リアルタイムでのデータ取得。本システムはバッチ処理である。
1.3. システムアーキテクチャ (Google Cloud)
本システムは、保守性とスケーラビリティ、コスト効率を最大化するため、以下のGoogle Cloudサービスで構成する。
実行環境: Cloud Run
理由: 長時間実行（最大60分）が可能で、複数のチャンネルを処理するバッチに最適。コンテナベースのため環境依存の問題がなく、トラフィックがない時はゼロにスケールするためコスト効率が高い。
入力ファイル配置: Cloud Storage
理由: url_list.txtを配置する場所。永続的で高耐久なストレージであり、Cloud Runから容易にアクセス可能。
出力ファイル保存: Cloud Storage
理由: 生成されたCSVファイルを保存する場所。分析担当者がダウンロードしやすい。
機密情報管理: Secret Manager
理由: YouTube Data APIキーのような機密情報をコードから分離し、安全に管理・運用するため。アクセス制御も厳密に行える。
ロギング・監視: Cloud Logging
理由: Cloud Runと標準で統合されており、構造化ログを出力することで、処理の追跡とエラー解析を極めて容易にする。
2. 機能要件詳細
2.1. 入力: url_list.txt
ファイル名: url_list.txt (固定)
配置場所: 指定されたCloud Storageバケットのルートディレクトリ。
フォーマット: UTF-8エンコーディングのテキストファイル。1行につき1つのYouTubeチャンネルURLを記述。
バリデーション（心配性チェック）:
ファイルが存在しない場合、エラーログを出力し処理を異常終了する。
ファイルが空の場合、警告ログを出力し処理を正常終了する。
各行について、有効なYouTubeチャンネルURL形式（https://www.youtube.com/channel/... や https://www.youtube.com/@...）であるか正規表現で検証する。無効なURLはスキップし、その旨を警告ログに記録する。
空行や前後の空白は自動的にトリムして処理する。
2.2. 処理ロジック
実行トリガー: 手動実行（gcloudコマンド）またはCloud Schedulerによる定期実行を想定。
ステップ:
初期化: Secret ManagerからYouTube Data APIキーを安全に取得。Cloud Storageクライアントを初期化。
入力ファイル読み込み: url_list.txtをCloud Storageから読み込み、URLリストを生成。
メインループ: URLリストを1件ずつ反復処理。
チャンネル情報取得: Channels.list APIを使用し、チャンネル名、概要、開始日、uploadsプレイリストIDを取得。
動画リスト取得: PlaylistItems.list APIを使用し、uploadsプレイリストIDから動画IDのリストを全件取得（ページネーション処理を必須とする）。
動画詳細情報取得: 取得した動画IDを50件ずつのバッチにまとめ、Videos.list APIで各動画の詳細（タイトル、長さ、再生数、高評価数、コメント数、タグ、アップロード日）を一括取得。
ショート動画判定: 動画の長さが61秒未満、かつアスペクト比が縦長（width < height）のものをショート動画と判定する。（APIからアスペクト比は直接取れないため、動画の長さのみを主判定基準とし、/shorts/ URL形式を補助的に利用する）。
データ整形: 取得したデータをCSV出力項目に従って整形。
CSVファイル出力: 整形したデータをチャンネルごとに1つのCSVファイルとしてCloud Storageに出力。
2.3. 出力: CSVファイル
保存先: 指定されたCloud Storageバケット内の output/{YYYYMMDD}/ フォルダ。（日付でフォルダ分けし整理）
ファイル名: 【チャンネル名】_【YYYYMMDD】.csv
【チャンネル名】: APIから取得した正式なチャンネル名。ファイル名として使用できない文字（/など）は全角の ／ などに置換する。
【YYYYMMDD】: 処理実行日。
フォーマット: UTF-8 (BOM付き)エンコーディング。Excelでの文字化けを防ぐ。
ヘッダー/項目: 以下の項目を1行目に出力する。
列	項目名	データソース (API)	Null許容/代替値
A	チャンネル名	Channels: snippet.title	No
B	チャンネル開始日	Channels: snippet.publishedAt	No
C	チャンネル概要	Channels: snippet.description	Yes / ""
D	動画タイトル	Videos: snippet.title	No
E	動画URL	固定文字列 + Videos: id	No
F	アップロード日	Videos: snippet.publishedAt	No
G	再生回数	Videos: statistics.viewCount	Yes / 0
H	高評価数	Videos: statistics.likeCount	Yes / 0
I	コメント数	Videos: statistics.commentCount	Yes / 0
J	動画の長さ(秒)	Videos: contentDetails.duration	No
K	サムネイル画像URL	Videos: snippet.thumbnails.high.url	No
L	動画タグ	Videos: snippet.tags	Yes / ""
3. 非機能要件詳細
エラーハンドリング（超心配性設計）:
APIクォータ超過: googleapiclient.errors.HttpError (403 Forbidden, reason: quotaExceeded) を検知した場合、エラーログに詳細を記録し、その時点の処理を中断してシステムを終了する。リトライは行わない（即時リトライはクォータをさらに悪化させるため）。
APIからのエラー全般: 4xx系/5xx系のHTTPエラーが発生した場合、最大3回まで指数バックオフ（Exponential Backoff）付きでリトライを実行する。3回失敗した場合は、該当チャンネルの処理をスキップし、詳細なエラー情報をログに記録して次のチャンネルへ進む。
データ欠損: APIレスポンスに statistics や tags などの期待した項目が存在しない場合（例: コメントが無効な動画）、プログラムが停止しないよう安全にアクセスし、該当項目には代替値（0 or ""）を格納する。警告ログにその旨を記録する。
タイムアウト: Cloud Runのタイムアウト（最大60分）を考慮し、1チャンネルあたりの処理が極端に長い場合（数万本単位の動画があるチャンネルなど）は、処理を分割するか、タイムアウト前に正常終了する仕組みを検討する（今回はスコープ外だが、ログで検知可能にしておく）。
ロギング:
Cloud Loggingの構造化ログ（JSON形式）を利用する。
severity (INFO, WARNING, ERROR)、message、timestamp はもちろんのこと、処理中のチャンネルURLや動画IDなどのコンテキスト情報を含める。
ログレベル:
INFO: 処理の開始/終了、各チャンネルの処理開始/完了、生成したCSVファイル名と動画件数。
WARNING: 無効なURLのスキップ、データの一部欠損、リトライの実行。
ERROR: ファイルI/Oエラー、APIキー不正、リトライ上限到達、予期せぬ例外。スタックトレースを必ず含める。
セキュリティ:
main.py のコード内にAPIキーや認証情報を一切ハードコーディングしない。全てSecret Manager経由で取得する。
Cloud Runにアタッチするサービスアカウントには、Secret Manager Secret Accessor と Storage Object Creator/Reader の最小限のIAMロールのみを付与する。
【超詳細】タスクリスト (WBS)
ID	タスク名	詳細作業内容	担当者	状態
1	【フェーズ1】環境構築・設計			
1.1	Google Cloud プロジェクト設定	プロジェクト作成、課金設定の有効化。	私	未着手
1.2	各種APIの有効化	Cloud Run, Cloud Storage, Secret Manager, YouTube Data API v3を有効化。	私	未着手
1.3	IAMとサービスアカウントの設定	Cloud Run用のサービスアカウント作成。最小権限のIAMロールを付与。	私	未着手
1.4	Secret Managerの設定	YouTube Data APIキーを保存するシークレットを作成。	私	未着手
1.5	Cloud Storageバケットの作成	入力用(input/)と出力用(output/)のバケット（またはフォルダ）を設計・作成。	私	未着手
1.6	ローカル開発環境の構築	Python 3.10+、pip、virtualenvをセットアップ。gcloud CLIをインストール・設定。	私	未着手
2	【フェーズ2】実装			
2.1	プロジェクト初期設定	main.py、requirements.txt、Dockerfile、.gitignoreを作成。	私	未着手
2.2	モジュール1: 設定・認証			
2.2.1	Secret ManagerからのAPIキー取得	google-cloud-secret-managerライブラリを使用し、APIキーを安全に読み込む処理を実装。	私	未着手
2.2.2	ロギング設定	google-cloud-loggingと連携し、構造化ログを出力するロガーをセットアップ。	私	未着手
2.2.3	クライアント初期化	YouTube APIクライアント、Cloud Storageクライアントを初期化する処理を実装。	私	未着手
2.3	モジュール2: 入力処理			
2.3.1	Cloud Storageからのファイル読込	url_list.txtを読み込む処理を実装。ファイル不存在エラーハンドリングを含む。	私	未着手
2.3.2	URLリストのパースと検証	ファイル内容を1行ずつ読み込み、URLのバリデーションとサニタイズを行う処理を実装。	私	未着手
2.4	モジュール3: YouTubeデータ取得			
2.4.1	チャンネル情報取得処理	Channels.listを呼び出し、必要な情報を取得。APIエラーハンドリング（リトライ含む）を実装。	私	未着手
2.4.2	全動画リスト取得処理	PlaylistItems.listのページネーションをループで処理し、全動画IDを取得。クォータを意識した実装。	私	未着手
2.4.3	動画詳細情報一括取得処理	動画IDを50件単位でバッチ処理し、Videos.listを呼び出す。データ欠損時の安全なアクセスを実装。	私	未着手
2.4.4	ショート動画判定ロジック	動画の長さ（ISO 8601形式を秒に変換）に基づき判定する関数を実装。	私	未着手
2.5	モジュール4: 出力処理			
2.5.1	CSVデータ生成処理	取得したデータを定義済みの列順に整形。	私	未着手
2.5.2	Cloud StorageへのCSV書き込み	チャンネル名と日付でファイル名を決定し、指定バケット/フォルダにCSVをアップロードする処理を実装。	私	未着手
2.6	モジュール5: メインロジック			
2.6.1	全体統括処理	各モジュールを呼び出し、url_list.txtの各行に対して一連の処理を実行するメインループを実装。	私	未着手
2.7	コンテナ化 (Dockerfile)	Python実行環境、ライブラリのインストール、main.pyの実行コマンドを記述したDockerfileを作成。	私	未着手
3	【フェーズ3】テスト			
3.1	単体テスト (pytest)	各モジュール・関数が独立して正しく動作することを確認。	私	未着手
3.1.1	テスト: URLバリデーション	正常系、異常系（HTTP, FTP, 空白など）のURLでテスト。	私	未着手
3.1.2	テスト: ISO8601期間変換	PT1M1S -> 61 のような変換が正しいかテスト。	私	未着手
3.2	結合テスト			
3.2.1	テスト: 正常系フロー	1〜3チャンネル程度の正常なurl_list.txtで、全体の処理が通り、正しいCSVが出力されることを確認。	私	未着手
3.3	異常系テスト			
3.3.1	テスト: ファイル不存在	url_list.txt がない状態で実行し、エラーログが出て終了することを確認。	私	未着手
3.3.2	テスト: APIキー不正	無効なAPIキーを設定し、認証エラーがログに出力されることを確認。	私	未着手
3.3.3	テスト: チャンネルURL不正	存在しない、または無効なチャンネルURLを含むリストで、該当URLがスキップされることを確認。	私	未着手
4	【フェーズ4】デプロイ・運用			
4.1	Cloud Build 設定 (任意)	GitHub等と連携し、pushをトリガーに自動でコンテナイメージをビルドし、Cloud RunにデプロイするCI/CDパイプラインを構築。	私	未着手
4.2	Cloud Runへの初回デプロイ	作成したコンテナイメージをCloud Runサービスとしてデプロイ。環境変数（バケット名など）を設定。	私	未着手
4.3	実行テスト on Cloud	実際にCloud Run上で実行し、Cloud Storageにファイルが生成され、Cloud Loggingにログが出力されることを最終確認。	私	未着手
4.4	運用ドキュメント作成	README.mdに、システムの概要、設定方法、実行方法、トラブルシューティングを簡潔に記述。	私	未着手